apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'org.jetbrains.kotlin.android'

android {
    compileSdk Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)

    defaultConfig {
        applicationId "sdk.chat.android.robot"

        multiDexEnabled = true
        minSdkVersion Integer.parseInt(project.DEMO_MIN_SDK)
        targetSdk Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)

//        applicationId "sdk.chat.android.robot"
        versionName CHAT_SDK_VERSION
        versionCode CHAT_SDK_BUILD_NUMBER as int
    }

//    flavorDimensions "version"
//    productFlavors {
//        free {
//            dimension "version"
////            applicationIdSuffix ".free"
//            versionNameSuffix ""
//        }
//        official {
//            dimension "version"
////            applicationIdSuffix ".pro"
//            versionNameSuffix "-official"
//        }
//    }
    flavorDimensions "version"
    productFlavors {
        free {
            dimension "version"
            applicationId "sdk.chat.android.robot"
//            applicationId "com.chuanxiang.graceword"
//            versionName "1.0.1"
        }
        official {
            dimension "version"
            applicationId "app.graceword.android"
            versionName "1.0.1"
            versionCode 5 as int
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }


    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'D3bug123'
            storeFile file('debug.keystore')
            storePassword 'D3bug123'
//            keyAlias project.property("signing.keyId")
//            keyPassword project.property("signing.password")
//            storeFile file('d:\\graceword.jks')
//            storePassword project.property("signing.password")
        }
        release {
//            keyAlias project.property("signing.keyId")
//            keyPassword project.property("signing.password")
//            storeFile file('d:\\graceword.jks')
//            storePassword project.property("signing.password")

            def keystorePropertiesFile = rootProject.file("keystore.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../chat-sdk-proguard-rules.pro', 'proguard-rules.pro'
        }
        debug {
//            resValue "string", "app_name", "MyApp Debug"
//            applicationId "sdk.chat.android.robot"
//            minifyEnabled project.hasProperty('minifyDebug') && minifyDebug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../chat-sdk-proguard-rules.pro', 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
        }
    }

    applicationVariants.all { variant ->
//        def buildType = variant.buildType.name
//        copy {
//            from "src/${buildType}/google-services.json"
//            into "."
//        }
        variant.outputs.all { output ->
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def flavor = variant.flavorName
            def formattedDate = new Date().format('yyyyMMddHHmm')

            outputFileName = "graceword_v${versionName}_${versionCode}.apk"
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
        lintConfig file('lint.xml')
    }
    namespace 'sdk.chat.demo.pre'
    kotlinOptions {
        jvmTarget = '11'
    }

}

//gradle.taskGraph.whenReady {
//    tasks.each { task ->
//        if (task.name.contains("uploadCrashlyticsMappingFile")) {
//            task.enabled = false
//        }
//    }}


//repositories {
//    // 默认会继承项目级的仓库配置
//    // 添加模块特有的仓库
//    maven {
//        url "https://artifact.bytedance.com/repository/Volcengine/"
//    }
//}

dependencies {
//    implementation project(':chat-sdk-demo')
//    api project(':chat-sdk-app-firebase')
    api platform("com.google.firebase:firebase-bom:$firebaseBOM")
    implementation "com.google.firebase:firebase-crashlytics"
    implementation("com.google.firebase:firebase-inappmessaging-display")
    implementation "com.google.firebase:firebase-perf"
    implementation "com.google.firebase:firebase-messaging"
    implementation("com.google.firebase:firebase-analytics")
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "com.google.code.gson:gson:$gsonVersion"
//    api project(':chat-sdk-core-ui')

    api "androidx.recyclerview:recyclerview:$androidxRecyclerViewVersion"
    api "com.google.android.material:material:$materialVersion"
    api project(':chat-sdk-core')
    api project(':vendor-chatkit')
    api project(':chat-sdk-firebase-push')
//    api project(':chat-sdk-pro-message-audio')
//    api project(':chat-sdk-pro-contact-book')
//    implementation project(':android-networking')
    api "com.github.bumptech.glide:glide:$glideVersion"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation("androidx.work:work-runtime:2.8.1")
    implementation "io.noties.markwon:core:4.6.2"
    implementation "com.github.chrisbanes:PhotoView:$photoViewVersion"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.0'
    implementation 'com.geyifeng.immersionbar:immersionbar:3.2.1'
    implementation 'com.github.prolificinteractive:material-calendarview:2.0.1'
    implementation "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:$keyboardVisibilityEventVersion"
    implementation "androidx.appcompat:appcompat:1.6.0"
    implementation 'com.github.qichuan:android-opencc:1.2.0'

    implementation 'com.bytedance.boringssl.so:boringssl-so:1.3.7-16kb'
    implementation('org.chromium.net:cronet:4.2.210.4-tob') {
        exclude group: 'com.bytedance.common', module: 'wschannel'
    }
    implementation 'com.bytedance.frameworks.baselib:ttnet:4.2.210.4-tob'
    implementation 'com.bytedance.speechengine:speechengine_tob:0.0.8.1-bugfix'
    implementation 'androidx.lifecycle:lifecycle-process:2.0.0'


    implementation 'org.tinylog:tinylog-api:2.4.1'
    runtimeOnly 'org.tinylog:tinylog-impl:2.4.1'

}
